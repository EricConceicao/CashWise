// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// Tábela com todo o esqueleto do nosso usuário comum
model User {
  id           Int         @id @default(autoincrement())
  email        String      @unique @db.VarChar(255)
  name         String      @db.VarChar(255)
  sname        String      @db.VarChar(255)
  password     String
  photo        String?     @default("/img/pfps/pfp-padrao.png") @db.Text
  wiseCoins    Int         @default(0)
  level        String      @default("Iniciante") @db.VarChar(255)
  exp          Int         @default(0)
  creationDate DateTime    @default(now())
  sessions     Session[]
  UserIcons    UserIcons[]
  CoinText     CoinText[]
  gastos       Gasto[]
  ganhos       Ganho[]
  contas       Conta[]
}

// Tábela para envio de feedbacks da página contato
model Contact {
  id      Int      @id @default(autoincrement())
  name    String   @db.VarChar(255)
  email   String   @db.VarChar(255)
  subject String   @db.VarChar(255)
  message String   @db.Text
  date    DateTime @default(now())
}

// Tábela de sessões de usuários para manter o controle dos refreshTokens
model Session {
  id     Int    @id @default(autoincrement())
  token  String @unique @db.VarChar(200)
  userId Int
  user   User   @relation(fields: [userId], references: [id])
}

// Tábela de icones disponiveis no app. Se quiser adicionar um, fique avontade no meu script
// de configuração de ícones na API.

model Icon {
  id       Int         @id @default(autoincrement())
  name     String      @default("ícone sem nome") @db.VarChar(255)
  src      String      @db.Text
  price    Int
  userIcon UserIcons[]
}

// Tábela de ícones que o usuário possui/comprou. 
model UserIcons {
  id       Int     @id @default(autoincrement())
  iconId   Int
  userId   Int
  obtained Boolean @default(false)
  user     User    @relation(fields: [userId], references: [id])
  icon     Icon    @relation(fields: [iconId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

// Tábela para registrar os textos chaves
model CoinText {
  id     String  @id
  userId Int
  found  Boolean
  User   User    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

// Tábela com os gastos registrados na agenda
model Gasto {
  id        Int     @id @default(autoincrement())
  descricao String  @db.VarChar(255)
  categoria String  @db.VarChar(50)
  data      String
  valor     Decimal @db.Decimal(10, 2)
  User      User    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId    Int
}

// Tabela com os ganhos registrados na agenda
model Ganho {
  id        Int     @id @default(autoincrement())
  descricao String?  @db.VarChar(255)
  fonte     String  @db.VarChar(50)
  data      String
  valor     Decimal @db.Decimal(10, 2)
  User      User    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId    Int
}

// Tabela para armazenar informações sobre contas
model Conta {
  id            Int         @id @default(autoincrement())
  descricao     String      @db.VarChar(255)
  valor         Decimal     @db.Decimal(10, 2)
  diaVencimento Int
  recorrencia   Recorrencia
  periodo       Periodo?
  User          User        @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId        Int
}

// Enum para representar a recorrência da conta (mensal ou por período)
enum Recorrencia {
  MENSAL
  POR_PERIODO
}

// Modelo para representar o período, caso a conta tenha recorrência por período
model Periodo {
  id      Int    @id @default(autoincrement())
  inicio  String
  fim     String
  conta   Conta  @relation(fields: [contaId], references: [id])
  contaId Int    @unique
}

// Schema do sistema previdência //

model atualizacao_monetaria {
  id      Int     @id @default(autoincrement()) @db.UnsignedInt
  mes_ano String  @db.VarChar(7)
  indice  Decimal @db.Decimal(10, 6)
}

model SimulacaoBeneficio {
  id                          Int                          @id @default(autoincrement()) @db.UnsignedInt
  genero                      simulacao_beneficio_genero
  data_nascimento             DateTime                     @db.Date
  salario_atualizado          SalarioAtualizado?           @relation(fields: [salario_atualizado_id], references: [id])
  salario_atualizado_id       Int?                         @unique
  idade                       Int?
  tempo_contribuicao_mes      Int?
  idade_aposentadoria         Int?
  mes_aposentadoria           Int?
  anoAposentadoria            Int?
  tempo_contribuicao_pendente Int?
  simulacao_beneficio_id      Int?                         @unique
  valor_aposentadoria         Decimal?                     @db.Decimal(10, 2)
  valor_auxilio_doenca        Decimal?                     @db.Decimal(10, 2)
  simulacao_periodo_trabalho  simulacao_periodo_trabalho[]
}

enum simulacao_beneficio_genero {
  m
  f
}

model simulacao_periodo_trabalho {
  id                     Int                @id @default(autoincrement()) @db.UnsignedInt
  mes                    Int
  ano                    Int
  salario                Decimal            @db.Decimal(10, 2)
  mes_ano                String             @db.VarChar(7)
  simulacao_beneficio_id Int                @db.UnsignedInt
  simulacao_beneficio    SimulacaoBeneficio @relation(fields: [simulacao_beneficio_id], references: [id])
}

model SalarioAtualizado {
  id                     Int                 @id @default(autoincrement())
  mes_ano                DateTime
  salario_atualizado     Float
  simulacao_beneficio    SimulacaoBeneficio?
  simulacao_beneficio_id Int?
}
